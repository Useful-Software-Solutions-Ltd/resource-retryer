!function(){"use strict";function e(e,a,n){function o(r,a,n,o){if(o&&o.retry){var c=angular.extend({},s,o.retry);t(c);var f=e(r,a,n,o),m=n?u.concat(Object.getOwnPropertyNames(n)):u;return i(f,m,c),f}return e(r,a,n,o)}function i(e,r,t){r.forEach(function(r){c(e,r,t)})}function c(e,t,o){function i(){function t(a,s){var m=r(o,u);c.apply(e,i).$promise.then(function(e){f.$resolved=!0,a(e)},function(e){f.$resolved=!0,u<o.retries?(u+=1,angular.isFunction(o.retryCallback)&&o.retryCallback(e,u),n(function(){t(a,s)},m)):s(e)})}var i=arguments,s=a(function(e,r){t(e,r)}),f={$promise:s,$resolved:!1};return f}var c=e[t],u=0;e[t]=i}var u=["get","save","query","remove","delete"],s={strategy:"progressiveBackOff",minWait:50,maxWait:500,retries:5,base:2,startSequenceAfter:1};return o}function r(e,r){if("custom"===e.strategy)return e.delayCalculator(e,r);if("randomizedRetry"===e.strategy)return Math.floor(Math.random()*(e.maxWait-e.minWait+1))+e.minWait;if("progressiveBackOff"===e.strategy){var t=r+(e.startSequenceAfter-1),a=Math.pow(e.base,t);return a<e.minWait?e.minWait:a>e.maxWait?e.maxWait:a}}function t(e){if(e.strategy&&n.indexOf(e.strategy)<0)throw{name:"error",message:"Unknown retry approach. Acceptable options are: "+n.toString()}}var a=angular.module("resourceRetryer",["ngResource"]),n=["randomizedRetry","progressiveBackOff","custom"];a.config(["$provide",function(r){r.decorator("$resource",["$delegate","$q","$timeout",e])}])}();